const size = 8;
const maze = [
  'S', 0, 1, 0, 1, 'K', 1, 1,
  0, 0, 'K', 1, 1, 0, 1, 1,
  1, 1, 0, 0, 0, 0, 1, 'K',
  1, 1, 1, 0, 1, 1, 1, 0,
  'K', 1, 0, 0, 1, 0, 0, 0,
  0, 0, 1, 0, 1, 0, 1, 0,
  1, 0, 0, 0, 1, 0, 1, 0,
  1, 1, 1, 'K', 0, 0, 1, 'F'
];
const initialMaze = [...maze];

const questions = {
  5: { image: "static/img/bluray-player.jpg", options: ["–°–∞–Ω–¥—ã“õ", "–ú”ô—Ç—ñ–Ω–¥—ñ–∫", "–ì—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ", "–î—ã–±—ã—Å—Ç—ã“õ", "–í–∏–¥–µ–æ"], correct: "–í–∏–¥–µ–æ" },
  10: { image: "static/img/graphic.jpg", options: ["–°–∞–Ω–¥—ã“õ", "–ú”ô—Ç—ñ–Ω–¥—ñ–∫", "–ì—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ", "–î—ã–±—ã—Å—Ç—ã“õ", "–í–∏–¥–µ–æ"], correct: "–ì—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ" },
  23: { image: "static/img/number.jpg", options: ["–°–∞–Ω–¥—ã“õ", "–ú”ô—Ç—ñ–Ω–¥—ñ–∫", "–ì—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ", "–î—ã–±—ã—Å—Ç—ã“õ", "–í–∏–¥–µ–æ"], correct: "–°–∞–Ω–¥—ã“õ" },
  32: { image: "static/img/text.jpg", options: ["–°–∞–Ω–¥—ã“õ", "–ú”ô—Ç—ñ–Ω–¥—ñ–∫", "–ì—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ", "–î—ã–±—ã—Å—Ç—ã“õ", "–í–∏–¥–µ–æ"], correct: "–ú”ô—Ç—ñ–Ω–¥—ñ–∫" },
  59: { image: "static/img/69.jpg", options: ["–°–∞–Ω–¥—ã“õ", "–ú”ô—Ç—ñ–Ω–¥—ñ–∫", "–ì—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ", "–î—ã–±—ã—Å—Ç—ã“õ", "–í–∏–¥–µ–æ"], correct: "–î—ã–±—ã—Å—Ç—ã“õ" }
};

let currentIndex = maze.indexOf('S');
let collectedKeys = 0;
let score = 0;
const totalKeys = maze.filter(cell => cell === 'K').length;
const grid = document.getElementById('grid');
const info = document.getElementById('info');
const scoreDisplay = document.getElementById('score');
let gameFinished = false;  // –û–π—ã–Ω –∞—è“õ—Ç–∞–ª“ì–∞–Ω—ã–Ω –±–∞“õ—ã–ª–∞—É “Ø—à—ñ–Ω

// ‚Äî‚Äî‚Äî –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async function sendProgress() {
  try {
    await fetch("/game_result", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        game_name:  "maze",  // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–π –∏–≥—Ä—ã
        score:      score,         // —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç
        completed:  gameFinished   // true, –µ—Å–ª–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω
      })
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", err);
  }
}

function restartGame() {
  currentIndex = initialMaze.indexOf('S');
  collectedKeys = 0;
  score = 0;
  gameFinished = false;  // –û–π—ã–Ω–¥—ã “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞“ì–∞–Ω–¥–∞ –∞—è“õ—Ç–∞–ª–º–∞“ì–∞–Ω –¥–µ–ø –µ—Å–µ–ø—Ç–µ–π–º—ñ–∑
  for (let i = 0; i < maze.length; i++) {
    maze[i] = initialMaze[i];
  }
  updateScore();
  info.textContent = '–û–π—ã–Ω “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞–ª–¥—ã!';
  createGrid();
}

function updateScore() {
  scoreDisplay.textContent = `–°—ñ–∑–¥—ñ“£ –±–∞–ª–ª—ã“£—ã–∑: ${score}`;
}

function createGrid() {
  grid.innerHTML = '';
  for (let i = 0; i < maze.length; i++) {
    const cell = document.createElement('div');
    cell.classList.add('cell');
    if (maze[i] === 1) {
      cell.classList.add('blocked');
    } else if (maze[i] === 'S') {
      cell.classList.add('start');
      cell.textContent = 'üö¶';
    } else if (maze[i] === 'F') {
      cell.classList.add('finish');
      cell.textContent = collectedKeys === totalKeys ? '‚úÖ' : 'üèÅ';
    } else if (maze[i] === 'K') {
      cell.textContent = 'üîë';
    }
    if (i === currentIndex) {
      cell.classList.add('player');
      cell.textContent = 'üôÇ';
    }
    cell.id = `cell-${i}`;
    grid.appendChild(cell);
  }
}

function isNeighbor(index1, index2) {
  const row1 = Math.floor(index1 / size);
  const col1 = index1 % size;
  const row2 = Math.floor(index2 / size);
  const col2 = index2 % size;
  return Math.abs(row1 - row2) + Math.abs(col1 - col2) === 1;
}

function showModalQuestion(index) {
  return new Promise(resolve => {
    const question = questions[index];
    if (!question) return resolve(false);

    const modal = document.createElement('div');
    modal.style.position = 'fixed';
    modal.style.top = '50%';
    modal.style.left = '50%';
    modal.style.transform = 'translate(-50%, -50%)';
    modal.style.background = '#fff';
    modal.style.padding = '20px';
    modal.style.borderRadius = '8px';
    modal.style.textAlign = 'center';
    modal.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';

    const img = document.createElement('img');
    img.src = question.image;
    img.style.width = '100%';
    img.style.marginBottom = '10px';

    const options = document.createElement('div');
    question.options.forEach(option => {
      const button = document.createElement('button');
      button.textContent = option;
      button.style.margin = '5px';
      button.style.padding = '10px';
      button.style.cursor = 'pointer';
      button.style.border = '1px solid #ccc';
      button.style.backgroundColor = '#f0f0f0';
      button.style.borderRadius = '5px';
      button.addEventListener('click', () => {
        document.body.removeChild(modal);
        resolve(option === question.correct);
      });
      options.appendChild(button);
    });

    modal.appendChild(img);
    modal.appendChild(options);
    document.body.appendChild(modal);
  });
}

grid.addEventListener('click', async (e) => {
  if (gameFinished) return;  // –ï–≥–µ—Ä –æ–π—ã–Ω –∞—è“õ—Ç–∞–ª“ì–∞–Ω –±–æ–ª—Å–∞, –µ—à“õ–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç –∂–∞—Å–∞–ª–º–∞–π–¥—ã

  const target = e.target;
  if (!target.classList.contains('cell')) return;

  const clickedIndex = parseInt(target.id.split('-')[1]);
  if (maze[clickedIndex] === 1) {
    info.textContent = '–ë“±–ª “±—è—à—ã“õ—Ç–∞ –±”©–≥–µ—Ç –±–∞—Ä!';
    return;
  }

  if (isNeighbor(currentIndex, clickedIndex)) {
    currentIndex = clickedIndex;

    if (maze[currentIndex] === 'K') {
      const correct = await showModalQuestion(clickedIndex);
      if (correct) {
        collectedKeys++;
        score += 20; // –î“±—Ä—ã—Å –∂–∞—É–∞–ø “Ø—à—ñ–Ω “±–ø–∞–π “õ–æ—Å—É
        maze[currentIndex] = 0;
        info.textContent = `–ö—ñ–ª—Ç –∂–∏–Ω–∞–ª–¥—ã! ${collectedKeys}/${totalKeys}`;
        updateScore();
      } else {
        score -= 10; // “ö–∞—Ç–µ –∂–∞—É–∞–ø “Ø—à—ñ–Ω “±–ø–∞–π –∞–ª—É
        info.textContent = '“ö–∞—Ç–µ –∂–∞—É–∞–ø! –ö—ñ–ª—Ç –∞–ª—ã–Ω“ì–∞–Ω –∂–æ“õ.';
        updateScore();
      }
    } else if (maze[currentIndex] === 'F') {
      if (collectedKeys === totalKeys) {
        info.textContent = `“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑! –ë–∞—Ä–ª—ã“õ –∫—ñ–ª—Ç –∂–∏–Ω–∞–ª–¥—ã. –°—ñ–∑–¥—ñ“£ “±–ø–∞–π—ã“£—ã–∑: ${score}`;
        gameFinished = true;  // –û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã
        sendProgress();
        const percentage = Math.round((score / (totalKeys * 20)) * 100);
        let comment = "";

        if (percentage >= 90) {
            comment = "üéâ ”®—Ç–µ –∂–∞“õ—Å—ã –Ω”ô—Ç–∏–∂–µ! –°–µ–Ω –ª–∞–±–∏—Ä–∏–Ω—Ç—Ç—ñ —Ç–∞–º–∞—à–∞ –º–µ“£–≥–µ—Ä–¥—ñ“£.";
        } else if (percentage >= 70) {
            comment = "üëç –ñ–∞“õ—Å—ã! –¢–∞“ì—ã –¥–∞ –±—ñ—Ä–∞–∑ –∂–∞—Ç—Ç—ã“ì—É –∞—Ä—Ç—ã“õ –µ—Ç–ø–µ–π–¥—ñ.";
        } else if (percentage >= 50) {
            comment = "üôÇ –û—Ä—Ç–∞—à–∞. “ö–∞–π—Ç–∞–¥–∞–Ω ”©—Ç—ñ–ø –∫”©—Ä—É–≥–µ –±–æ–ª–∞–¥—ã.";
        } else {
            comment = "‚ö†Ô∏è –¢–∞“ì—ã –±—ñ—Ä–Ω–µ—à–µ —Ä–µ—Ç —Ç”ô–∂—ñ—Ä–∏–±–µ –∂–∞—Å–∞“ì–∞–Ω –¥“±—Ä—ã—Å.";
        }

        document.getElementById('result-score').innerText = `“∞–ø–∞–π: ${score} (${percentage}%)`;
        document.getElementById('result-comment').innerText = comment;
        document.getElementById('result-box').style.display = 'block';
      } else {
        info.textContent = '–ë–∞—Ä–ª—ã“õ –∫—ñ–ª—Ç—Ç–µ—Ä–¥—ñ –∂–∏–Ω–∞—É—ã“£—ã–∑ “õ–∞–∂–µ—Ç!';
      }
    }

    createGrid();
  } else {
    info.textContent = '–¢–µ–∫ –∫”©—Ä—à—ñ “±—è—à—ã“õ“õ–∞ “ì–∞–Ω–∞ “õ–æ–∑“ì–∞–ª–∞ –∞–ª–∞—Å—ã–∑.';
  }
});

// –ë–∞—Å—Ç–∞–ø“õ—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
createGrid();
updateScore();
