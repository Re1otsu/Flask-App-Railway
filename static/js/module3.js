// ====================== game state ======================
const levels = [
    { encrypted: "<–ë–Ü–õ–Ü–ú>", answer: "3136233633", timeLimit: 40 },
    { encrypted: "<“í–û”®“í“∞–Æ> –¶–µ–∑–∞—Ä—å —à–∏—Ñ—Ä—ã–Ω —à–µ—à. “ö–∞–¥–∞–º 5 ", answer: "112333114426", timeLimit: 50 },
];

let gameFinished = false;

let levelPenalties = Array(levels.length).fill(0);
let currentLevel = 0;
let userInput = "";
let totalScore = 0;


// ====================== UI / —ç–∫—Ä–∞–Ω ======================
function updateScreen() {
    const screen = document.getElementById("screen");
    const level = levels[currentLevel];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    const encryptedText = document.getElementById("encrypted-text");
    encryptedText.textContent = level.encrypted;

    // –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–∞—Ä—ã (–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –∫—Ä–∞—Ç–µ–Ω 2 ‚Äî –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    const pairs = level.answer.match(/.{1,2}/g) || [level.answer];
    const placeholder = pairs
        .map((_, i) => (userInput.slice(i * 2, i * 2 + 2) || "--"))
        .join(" ");
    screen.textContent = placeholder;

    // –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ —Ç–∞–π–º–µ—Ä–∞
    updateTimerDisplay();
    // –æ–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ (–µ—Å–ª–∏ —É —Ç–µ–±—è –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)
    const scoreEl = document.getElementById("score");
    if (scoreEl) scoreEl.textContent = `–û—á–∫–∏: ${totalScore}`;
}

// ====================== level control ======================
function startLevel(index) {
    // —É—Å—Ç–∞–Ω–æ–≤–∏–º –∏–Ω–¥–µ–∫—Å (–Ω–∞ —Å–ª—É—á–∞–π —è–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
    currentLevel = index;
    userInput = "";
    updateScreen();
}

function finishGame() {
    stopTimer();
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥
    sendProgress();
    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º result-box ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ—é –ª–æ–≥–∏–∫—É
    const percentage = Math.round((totalScore / (levels.length * 50)) * 100); // –µ—Å–ª–∏ 50 –æ—á–∫–æ–≤ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    let comment = "";
    if (percentage >= 90) comment = "üéâ –ö–µ—Ä–µ–º–µ—Ç –∂“±–º—ã—Å! –®–∏—Ñ—Ä–ª–∞—Ä–¥—ã ”©—Ç–µ –∂–∞“õ—Å—ã –º–µ“£–≥–µ—Ä–¥—ñ“£.";
    else if (percentage >= 70) comment = "üëç –ñ–∞“õ—Å—ã –Ω”ô—Ç–∏–∂–µ! –¢–∞“ì—ã –¥–∞ —Ç”ô–∂—ñ—Ä–∏–±–µ –∂–∞—Å–∞–ø –∫”©—Ä.";
    else if (percentage >= 50) comment = "üôÇ –û—Ä—Ç–∞—à–∞. “ö–∞–π—Ç–∞–¥–∞–Ω ”©—Ç—ñ–ø –∫”©—Ä—Å–µ“£, –∂–∞“õ—Å—ã—Ä–∞“õ –±–æ–ª–∞–¥—ã.";
    else comment = "‚ö†Ô∏è –ñ–µ—Ç—ñ–ª–¥—ñ—Ä—É “õ–∞–∂–µ—Ç. –°–∞–±—ã—Ä —Å–∞“õ—Ç–∞–ø, —Ç–∞“ì—ã –±–∞–π“õ–∞–ø –∫”©—Ä.";

    document.getElementById('result-score').innerText = `–ñ–∞–ª–ø—ã “±–ø–∞–π: ${totalScore} (${percentage}%)`;
    document.getElementById('result-comment').innerText = comment;
    document.getElementById('result-box').style.display = 'block';
}

// ====================== input handlers ======================
function pressKey(key) {
    const level = levels[currentLevel];
    if (userInput.length < level.answer.length) {
        userInput += String(key);
        updateScreen();
    }
}

function clearScreen() {
    userInput = "";
    updateScreen();
}

function submitCode() {
    const level = levels[currentLevel];
    const message = document.getElementById("message");

    if (userInput === level.answer) {
        message.textContent = "–î“±—Ä—ã—Å! –°–µ–π—Ñ –∞—à—ã–ª–¥—ã.";
        message.style.color = "lime";

        // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        const baseReward = 50;
        const penalty = levelPenalties[currentLevel];

        // –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0)
        const reward = Math.max(0, baseReward - penalty);
        totalScore += reward;

        // –û–±–Ω—É–ª—è–µ–º —à—Ç—Ä–∞—Ñ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        levelPenalties[currentLevel] = 0;

        currentLevel++;

        if (currentLevel < levels.length) {
            alert(`–ö–µ–ª–µ—Å—ñ –¥–µ“£–≥–µ–π–≥–µ ”©—Ç—Ç—ñ“£—ñ–∑! –î–µ“£–≥–µ–π–≥–µ: ${reward} “±–ø–∞–π (—à—Ç—Ä–∞—Ñ—Ç–∞—Ä: ${penalty}).`);
            message.textContent = "";
            userInput = "";
            startLevel(currentLevel);
        } else {
            finishGame();
        }
        } else {
            message.textContent = "“ö–∞—Ç–µ! “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.";
            message.style.color = "red";

            const wrongPenalty = 5; // —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥
            levelPenalties[currentLevel] += wrongPenalty;

            alert(`–ö–æ–¥ “õ–∞—Ç–µ! –ñ–∏–Ω–∞–ª“ì–∞–Ω —à—Ç—Ä–∞—Ñ ${wrongPenalty} “±–ø–∞–π. –ñ–∞–ª–ø—ã —à—Ç—Ä–∞—Ñ: ${levelPenalties[currentLevel]}`);
            // –ü—Ä–∏ —ç—Ç–æ–º –º—ã –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∫–∏ —Å—Ä–∞–∑—É, —Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        }
}

// ======== –¢–∞–π–º–µ—Ä ========
let timeLeft = 120; // –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
let timerInterval = null;

function formatTime(s) {
  const mm = Math.floor(s / 60).toString().padStart(2, '0');
  const ss = (s % 60).toString().padStart(2, '0');
  return `${mm}:${ss}`;
}

function updateTimerDisplay() {
  const el = document.getElementById('time-value');
  if (el) el.textContent = formatTime(timeLeft);
  const badge = document.getElementById('timer');
  if (badge) {
    if (timeLeft <= 10) badge.classList.add('low');
    else badge.classList.remove('low');
  }
}

function startTimer(seconds) {
  stopTimer();
  timeLeft = seconds;
  updateTimerDisplay();
  timerInterval = setInterval(() => {
    timeLeft--;
    updateTimerDisplay();
    if (timeLeft <= 0) {
      stopTimer();
      onTimeOut();
    }
  }, 1000);
}

function stopTimer() {
  if (timerInterval) {
    clearInterval(timerInterval);
    timerInterval = null;
  }
  const badge = document.getElementById('timer');
  if (badge) badge.classList.remove('low');
}

function onTimeOut() {
  if (gameFinished) return;
  gameFinished = true;

  // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ)
  const message = document.getElementById("message");
  if (message) {
    message.textContent = "‚è∞ –£–∞“õ—ã—Ç –±—ñ—Ç—Ç—ñ!";
    message.style.color = "red";
  }

  sendProgress(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã
  document.getElementById('result-score').innerText = `“∞–ø–∞–π: ${totalScore}`;
  document.getElementById('result-comment').innerText = "–£–∞“õ—ã—Ç –∞—è“õ—Ç–∞–ª–¥—ã! –ö–µ–ª–µ—Å—ñ–¥–µ —Ç–µ–∑—ñ—Ä–µ–∫ ”ô—Ä–µ–∫–µ—Ç –µ—Ç.";
  document.getElementById('result-box').style.display = 'block';
}

// ====================== network helpers (—Ç–≤–æ—ë) ======================
async function sendProgress() {
  await fetch("/game_result", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      game_name: "cipher_game",
      score:     totalScore,
      completed: currentLevel >= levels.length
    })
  });
}

async function sendPenalty() {
  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ -5 –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  await fetch("/game_result", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      game_name: "cipher_game",
      score: -5,
      completed: false
    })
  });
}

// ====================== init ======================
document.addEventListener("DOMContentLoaded", () => {
    // –û–±—â–∏–π —Ç–∞–π–º–µ—Ä –Ω–∞ –≤—Å–µ —É—Ä–æ–≤–Ω–∏
    startTimer(180); // –Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—Å—é –∏–≥—Ä—É
    startLevel(0);
});

