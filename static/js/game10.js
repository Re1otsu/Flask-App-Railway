/* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö */
const ZONES = [
  {id:'audio', label:'–î—ã–±—ã—Å'},
  {id:'video', label:'–í–∏–¥–µ–æ'},
  {id:'text',  label:'–ú”ô—Ç—ñ–Ω'},
  {id:'image', label:'–ë–µ–π–Ω–µ'}
];

const ITEMS = [
  {id:'music', img:'static/img/dictaphone.png', label:'–ú—É–∑—ã–∫–∞', type:'audio'},
  {id:'movie', img:'static/img/camera.png', label:'–§–∏–ª—å–º', type:'video'},
  {id:'book',  img:'static/img/book.png',  label:'–ö—ñ—Ç–∞–ø',  type:'text'},
  {id:'picture', img:'static/img/canvas.png', label:'–°—É—Ä–µ—Ç', type:'image'}
];

const zonesWrap = document.getElementById('zones');
const invWrap = document.getElementById('inventory');
const resultBubble = document.getElementById('resultBubble');
const finalBox = document.getElementById('finalBox');
const star1 = document.getElementById('star1'), star2 = document.getElementById('star2');

const maxPoints = 2.0;
const pointPer = 0.5;

let state = {
  lockedPuzzles: {music:true, movie:true, book:true, picture:true}, // puzzle not solved => item locked
  placed: {}, // zoneId -> itemId
  scorePoints: 0.0
};

function shuffleArray(arr){
  return arr.map(v=>({v,sort:Math.random()}))
            .sort((a,b)=>a.sort-b.sort)
            .map(({v})=>v);
}

/* --- –†–µ–Ω–¥–µ—Ä –∑–æ–Ω --- */
function renderZones(){
  zonesWrap.innerHTML = '';
  const shuffledZones = shuffleArray(ZONES);  // <== –ø–µ—Ä–µ–º–µ—à–∞–ª–∏
  shuffledZones.forEach(z=>{
    const el = document.createElement('div');
    el.className = 'zone';
    el.id = `zone-${z.id}`;
    el.dataset.zone = z.id;
    el.innerHTML = `<div class="lock locked" id="lock-${z.id}">üîí –ñ–∞–±—ã“õ</div>
                    <h3>${z.label}</h3>
                    <div class="ph" id="ph-${z.id}">–ë“±–ª –∂–µ—Ä–≥–µ –∑–∞—Ç—Ç—ã –∞–ø–∞—Ä—ã“£—ã–∑</div>`;
    // drag/drop
    el.addEventListener('dragover', e=>e.preventDefault());
    el.addEventListener('drop', e=>{
      e.preventDefault();
      const itemId = e.dataTransfer.getData('text/plain');
      if(!itemId) return;
      if(state.placed[z.id]) return;
      if(state.lockedPuzzles[itemId]) {
        showSimpleModal('–ï—Å–∫–µ—Ä—Ç—É', '–ê–ª–¥—ã–º–µ–Ω –æ—Å—ã –∑–∞—Ç—Ç—ã“£ –ø–∞–∑–ª—ã–Ω —à–µ—à—ñ“£—ñ–∑.');
        return;
      }
      const itemObj = ITEMS.find(i=>i.id===itemId);
      if(itemObj.type === z.id){
        placeItemToZone(z.id, itemId);
      } else {
        shakeZone(z.id);
        showSimpleModal('“ö–∞—Ç–µ', '–ë“±–ª –∑–∞—Ç –æ—Å—ã –æ—Ä—ã–Ω“ì–∞ —Å–∞–π –∫–µ–ª–º–µ–π–¥—ñ.');
      }
    });
    zonesWrap.appendChild(el);
  });
}

/* --- –†–µ–Ω–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è --- */
function renderInventory(){
  invWrap.innerHTML = '';
  const shuffledItems = shuffleArray(ITEMS); // <== –ø–µ—Ä–µ–º–µ—à–∞–ª–∏
  shuffledItems.forEach(it=>{
    if(Object.values(state.placed).includes(it.id)) return;
    const el = document.createElement('div');
    el.className = 'item';
    el.id = `item-${it.id}`;
    if(state.lockedPuzzles[it.id]) el.classList.add('locked');
    el.draggable = !state.lockedPuzzles[it.id];
    el.innerHTML = `<img src="${it.img}" alt="${it.label}">`;
    invWrap.appendChild(el);

    if(!state.lockedPuzzles[it.id]){
      el.addEventListener('dragstart', ev=>{
        ev.dataTransfer.setData('text/plain', it.id);
        el.classList.add('dragging');
      });
      el.addEventListener('dragend', ()=>el.classList.remove('dragging'));
    } else {
      el.addEventListener('click', ()=> openPuzzleFor(it.id));
    }
  });
}

/* --- –£—Ç–∏–ª–∏—Ç—ã UI --- */
function updateResult(){
  resultBubble.textContent = `“∞–ø–∞–π: ${state.scorePoints.toFixed(1)} / ${maxPoints.toFixed(1)}`;
}
function shakeZone(zoneId){
  const z = document.getElementById(`zone-${zoneId}`);
  if(!z) return;
  z.animate([{transform:'translateX(0)'},{transform:'translateX(-8px)'},{transform:'translateX(8px)'},{transform:'translateX(0)'}],{duration:300});
}

/* --- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∑–æ–Ω—É (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏) --- */
function placeItemToZone(zoneId, itemId){
  // visual place
  const ph = document.getElementById(`ph-${zoneId}`);
  const itemObj = ITEMS.find(i=>i.id===itemId);
  ph.innerHTML = `<div style="display:flex;align-items:center;gap:10px">
                    <img src="${itemObj.img}" style="width:44px;height:44px;object-fit:contain;border-radius:6px">
                    <div style="font-weight:700;color:#dff8ff">${itemObj.label}</div>
                  </div>`;
  // mark placed
  state.placed[zoneId] = itemId;
  // remove from inventory element
  const invEl = document.getElementById(`item-${itemId}`);
  if(invEl) invEl.remove();
  // unlock zone UI
  const lockEl = document.getElementById(`lock-${zoneId}`);
  if(lockEl){ lockEl.classList.remove('locked'); lockEl.classList.add('open'); lockEl.textContent = 'üîì –ê—à—ã–ª–¥—ã'; }
  const zoneEl = document.getElementById(`zone-${zoneId}`);
  if(zoneEl) zoneEl.classList.add('correct');
  // increase score
  state.scorePoints = Math.min(maxPoints, +(state.scorePoints + pointPer).toFixed(3));
  updateResult();

  // check final
  if(Object.keys(state.placed).length === ZONES.length){
    setTimeout(showFinal, 700);
  }
}

/* --- –ú–æ–¥–∞–ª–∫–∏ --- */
function showSimpleModal(title, text){
  const tpl = document.getElementById('modalTpl');
  const node = tpl.content.cloneNode(true);
  const back = node.querySelector('.modal-back');
  const mTitle = node.getElementById('modalTitle');
  const mHint = node.getElementById('modalHint');
  const body = node.getElementById('modalBody');
  const close = node.getElementById('modalClose');

  mTitle.textContent = title;
  mHint.textContent = text;
  body.innerHTML = '';
  close.addEventListener('click', ()=> document.body.removeChild(back));
  document.body.appendChild(back);
}

/* --- –û—Ç–∫—Ä—ã—Ç—å –ø–∞–∑–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ --- */
function openPuzzleFor(itemId){
  if(!state.lockedPuzzles[itemId]) return; // —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
  if(itemId === 'music') showPuzzleTypes(itemId);
  else if(itemId === 'movie') showPuzzleCaesar(itemId);
  else if(itemId === 'book') showPuzzleBinary(itemId);
  else if(itemId === 'picture') showPuzzleDecimal(itemId);
}

/* ---------- –ü–ê–ó–õ 1: –í–∏–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (drag images –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ---------- */
/* --- –•–µ–ª–ø–µ—Ä: –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ --- */
function shuffleArray(arr){
  return arr
    .map(v => ({ v, sort: Math.random() }))
    .sort((a,b) => a.sort - b.sort)
    .map(({ v }) => v);
}

function showPuzzleTypes(itemId){
  let old = document.getElementById("puzzleModal");
  if(old) old.remove();

  const back = document.createElement("div");
  back.className = "modal-back";
  back.id = "puzzleModal";
  back.innerHTML = `
    <div class="modal">
      <h2 id="modalTitle">–ê“õ–ø–∞—Ä–∞—Ç —Ç“±—Ä–ª–µ—Ä—ñ</h2>
      <p id="modalHint">–ü–µ—Ä–µ—Ç–∞“ì—ã“£—ã–∑ —Å—É—Ä–µ—Ç—Ç–µ—Ä–¥—ñ –¥“±—Ä—ã—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è“ì–∞: –î—ã–±—ã—Å / –ë–µ–π–Ω–µ / –ú”ô—Ç—ñ–Ω</p>
      <div id="modalBody"></div>
      <div style="margin-top:10px;display:flex;gap:8px;justify-content:flex-end">
        <button class="btn ghost" id="modalClose">–ñ–∞–±—É</button>
      </div>
    </div>
  `;

  const body = back.querySelector("#modalBody");

  let IMGS = [
    {id:'pimg-sound', icon:'üîä', kind:'audio'},
    {id:'pimg-pic',   icon:'üñºÔ∏è', kind:'image'},
    {id:'pimg-text',  icon:'üìÑ', kind:'text'}
  ];
  let TARGETS = [
    {id:'t-audio', label:'–î—ã–±—ã—Å', accept:'audio'},
    {id:'t-image', label:'–ë–µ–π–Ω–µ', accept:'image'},
    {id:'t-text',  label:'–ú”ô—Ç—ñ–Ω', accept:'text'}
  ];

  // –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
  IMGS = shuffleArray(IMGS);
  TARGETS = shuffleArray(TARGETS);

  body.innerHTML = `
    <div class="drag-pad" id="dragpad">
      ${IMGS.map(img=>`<div class="puzzle-img" draggable="true" data-kind="${img.kind}" id="${img.id}">${img.icon}</div>`).join('')}
    </div>
    <div class="targets" id="targets">
      ${TARGETS.map(t=>`<div class="target" data-accept="${t.accept}" id="${t.id}"><strong>${t.label}</strong></div>`).join('')}
    </div>
    <div class="small" style="margin-top:8px">–ë–∞—Ä–ª—ã“õ —Å—É—Ä–µ—Ç—Ç–µ—Ä –¥“±—Ä—ã—Å –æ—Ä–Ω–∞–ª–∞—Å—Ç—ã—Ä—Å–∞ ‚Äî –ø–∞–∑–ª –∞—à—ã–ª–∞–¥—ã.</div>
  `;

  body.querySelectorAll('.puzzle-img').forEach(img=>{
    img.addEventListener('dragstart', ev=>{
      ev.dataTransfer.setData('text/plain', img.id);
    });
  });
  body.querySelectorAll('.target').forEach(t=>{
    t.addEventListener('dragover', e=>e.preventDefault());
    t.addEventListener('drop', e=>{
      e.preventDefault();
      const pid = e.dataTransfer.getData('text/plain');
      if(!pid) return;
      const p = document.getElementById(pid);
      const kind = p.dataset.kind;
      if(kind === t.dataset.accept){
        t.appendChild(p);
        p.style.pointerEvents = "none";
        checkTypesSolved(back, itemId);
      } else {
        p.animate([{transform:'translateX(0)'},{transform:'translateX(-6px)'},{transform:'translateX(6px)'},{transform:'translateX(0)'}],{duration:250});
      }
    });
  });

  back.querySelector("#modalClose").addEventListener("click", ()=> back.remove());
  document.body.appendChild(back);
}

function checkTypesSolved(backdropNode, itemId){
  const allPlaced = Array.from(document.querySelectorAll('#targets .target'))
    .every(t=> t.querySelector('.puzzle-img') );
  if(allPlaced){
    setTimeout(()=>{
      state.lockedPuzzles[itemId] = false;
      renderInventory();
      backdropNode.remove();
      showSimpleModal('–ñ–∞—Ä–∞–π—Å—ã“£!', '–ü–∞–∑–ª —à–µ—à—ñ–ª–¥—ñ ‚Äî –∑–∞—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–¥–∞ –∞—à—ã–ª–¥—ã. –ï–Ω–¥—ñ –æ–Ω—ã –æ—Ä–Ω–∞—Ç—É“ì–∞ –±–æ–ª–∞–¥—ã.');
    },300);
  }
}
/* ---------- –ü–ê–ó–õ 2: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–¶–µ–∑–∞—Ä—å, –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ) ---------- */
// –≤—ã–Ω–µ—Å–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
const KAZ_ALPHABET = "–ê”ò–ë–í–ì“í–î–ï–Å–ñ–ó–ò–Ü–ô–ö“ö–õ–ú–ù“¢–û”®–ü–†–°–¢–£“∞“Æ–§–•“∫–¶–ß–®–©–™–´–Ü–¨–≠–Æ–Ø".split('');

function caesarEncodeKaz(s, shift){
  return s.split('').map(ch=>{
    const idx = KAZ_ALPHABET.indexOf(ch.toUpperCase());
    if(idx === -1) return ch; // –µ–≥–µ—Ä ”ô—Ä—ñ–ø –±–æ–ª–º–∞—Å–∞, ”©–∑–≥–µ—Ä—ñ—Å—Å—ñ–∑ “õ–∞–ª–∞–¥—ã
    const newIdx = (idx + shift) % KAZ_ALPHABET.length;
    return KAZ_ALPHABET[newIdx];
  }).join('');
}

function showPuzzleCaesar(itemId){
  const tpl = document.getElementById('modalTpl').content.cloneNode(true);
  const back = tpl.querySelector('.modal-back');
  const title = tpl.getElementById('modalTitle');
  const hint = tpl.getElementById('modalHint');
  const body = tpl.getElementById('modalBody');

  const plain = '–ö–ï–ú–ï';
  const shift = 2;
  const encoded = caesarEncodeKaz(plain, shift);

  title.textContent = '–®–∏—Ñ—Ä ‚Äî –¶–µ–∑–∞—Ä—å';
  hint.textContent = `–î–µ–∫–æ–¥—Ç–∞“£—ã–∑ (–¶–µ–∑–∞—Ä—å +${shift}): ${encoded}`;

  body.innerHTML = `
    <div class="small">–ï—Å–∫—ñ –¶–µ–∑–∞—Ä—å —à–∏—Ñ—Ä—ã–Ω “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑. –ë–∞—Å—Ç–∞–ø“õ—ã —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.</div>
    <div style="margin-top:10px">
      <input id="caesarInput" placeholder="–ñ–∞—É–∞–ø—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑"
        style="width:100%;padding:8px;border-radius:8px;
        border:1px solid rgba(255,255,255,0.06);
        background:transparent;color:#e6f6ff">
    </div>
    <div style="margin-top:10px;display:flex;gap:8px;justify-content:flex-end">
      <button class="btn" id="checkCaesar">–¢–µ–∫—Å–µ—Ä—É</button>
      <button class="btn ghost" id="closeCaesar">–ñ–∞–±—É</button>
    </div>
  `;

  body.querySelector('#checkCaesar').addEventListener('click', ()=>{
    const val = body.querySelector('#caesarInput').value.trim().toUpperCase();
    if(val === plain){
      state.lockedPuzzles[itemId] = false;
      renderInventory();
      document.body.removeChild(back);
      showSimpleModal('–ñ–∞—Ä–∞–π—Å—ã“£!', `–î“±—Ä—ã—Å ‚Äî –±–∞—Å—Ç–∞–ø“õ—ã —Å”©–∑: ${plain}. –ó–∞—Ç –∞—à—ã–ª–¥—ã.`);
    } else {
      const inp = body.querySelector('#caesarInput');
      inp.animate(
        [
          {transform:'translateX(0)'},
          {transform:'translateX(-6px)'},
          {transform:'translateX(6px)'},
          {transform:'translateX(0)'}
        ],
        {duration:280}
      );
    }
  });

  body.querySelector('#closeCaesar').addEventListener('click', ()=>{
    document.body.removeChild(back);
  });

  document.body.appendChild(back);
}
/* ---------- –ü–ê–ó–õ 3: –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥ (—Å–æ–±–µ—Ä–∏ –±–∏—Ç—ã) ---------- */
function showPuzzleBinary(itemId){
  const tpl = document.getElementById('modalTpl').content.cloneNode(true);
  const back = tpl.querySelector('.modal-back');
  const title = tpl.getElementById('modalTitle');
  const hint = tpl.getElementById('modalHint');
  const body = tpl.getElementById('modalBody');
  const close = tpl.getElementById('modalClose');

  // —Ñ–∏–∫—Å–∏—Ä—É–µ–º —á–∏—Å–ª–æ 68
  const num = 68;
  const bin = num.toString(2).padStart(8, '0');

  title.textContent = '–ï–∫—ñ–ª—ñ–∫ –∫–æ–¥';
  hint.textContent = `–°–∞–Ω–¥—ã –µ–∫—ñ–ª—ñ–∫–∫–µ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ“£—ñ–∑: ${num}`;

  body.innerHTML = `
    <div class="small">–¢“Ø—Å—É: –±–∏—Ç—Ç–µ—Ä–¥—ñ –±–∞—Å—ã–ø, 0/1 —Ä–µ—Ç—ñ–º–µ–Ω “õ“±—Ä–∞—Å—Ç—ã—Ä—É. “ö–∞–∂–µ—Ç “±–∑—ã–Ω–¥—ã“õ: ${bin.length} –±–∏—Ç.</div>
    <div style="margin-top:10px" id="bitRow"></div>
    <div style="margin-top:12px;display:flex;gap:8px;justify-content:flex-end">
      <button class="btn" id="checkBin">–¢–µ–∫—Å–µ—Ä—É</button>
      <button class="btn ghost" id="closeBin">–ñ–∞–±—É</button>
    </div>
  `;

    const row = body.querySelector('#bitRow');
    row.style.display = 'flex';
    row.style.gap = '6px';
  // —Å–æ–∑–¥–∞—ë–º –±–∏—Ç–æ–≤—ã–µ "–∫–ª–µ—Ç–∫–∏"
  for(let i=0;i<bin.length;i++){
    const b = document.createElement('div');
    b.className = 'bit';
    b.dataset.val = '0';
    b.textContent = '0';
    b.addEventListener('click', ()=> {
      if(b.dataset.val === '0'){
        b.dataset.val='1';
        b.classList.add('on');
        b.textContent='1';
      } else {
        b.dataset.val='0';
        b.classList.remove('on');
        b.textContent='0';
      }
    });
    row.appendChild(b);
  }

  body.querySelector('#checkBin').addEventListener('click', ()=>{
    const val = Array.from(row.children).map(c=>c.dataset.val).join('');
    if(val === bin){
      state.lockedPuzzles[itemId] = false;
      renderInventory();
      document.body.removeChild(back);
      showSimpleModal('–î“±—Ä—ã—Å!', `–ï–∫—ñ–ª—ñ–∫: ${bin} ‚Äî –∑–∞—Ç –∞—à—ã–ª–¥—ã.`);
    } else {
      row.animate([{transform:'translateY(0)'},{transform:'translateY(-6px)'},{transform:'translateY(6px)'},{transform:'translateY(0)'}],{duration:260});
    }
  });

  body.querySelector('#closeBin').addEventListener('click', ()=>document.body.removeChild(back));
  document.body.appendChild(back);
}

/* ---------- –ü–ê–ó–õ 4: –î–µ—Å—è—Ç–∏—á–Ω—ã–π (–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–≤–æ–∏—á–Ω–æ–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ) ---------- */
function showPuzzleDecimal(itemId){
  const tpl = document.getElementById('modalTpl').content.cloneNode(true);
  const back = tpl.querySelector('.modal-back');
  const title = tpl.getElementById('modalTitle');
  const hint = tpl.getElementById('modalHint');
  const body = tpl.getElementById('modalBody');
  const close = tpl.getElementById('modalClose');

  const bin = '01110110'; // 11
  const dec = parseInt(bin,2);

  title.textContent = '–û–Ω–¥—ã“õ –∫–æ–¥';
  hint.textContent = `–ë–µ—Ä—ñ–ª–≥–µ–Ω –µ–∫—ñ–ª—ñ–∫: ${bin} ‚Äî –æ–Ω—ã –æ–Ω–¥—ã“õ“õ–∞ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ“£—ñ–∑`;

  body.innerHTML = `
    <div class="small">–ï–∫—ñ–ª—ñ–∫ —Å–∞–Ω–¥—ã –æ–Ω–¥—ã“õ“õ–∞ –∞–π–Ω–∞–ª–¥—ã—Ä—ã–ø, –Ω”ô—Ç–∏–∂–µ–Ω—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.</div>
    <div style="margin-top:10px"><input id="decInput" placeholder="–ñ–∞—É–∞–ø—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑" style="width:100%;padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:#e6f6ff"></div>
    <div style="margin-top:10px;display:flex;gap:8px;justify-content:flex-end">
      <button class="btn" id="checkDec">–¢–µ–∫—Å–µ—Ä—É</button>
      <button class="btn ghost" id="closeDec">–ñ–∞–±—É</button>
    </div>
  `;
  body.querySelector('#checkDec').addEventListener('click', ()=>{
    const val = parseInt(body.querySelector('#decInput').value.trim(),10);
    if(val === dec){
      state.lockedPuzzles[itemId] = false;
      renderInventory();
      document.body.removeChild(back);
      showSimpleModal('–ñ–∞—Ä–∞–π—Å—ã“£!', `–î“±—Ä—ã—Å –∂–∞—É–∞–ø: ${dec}. –ó–∞—Ç –∞—à—ã–ª–¥—ã.`);
    } else {
      const inp = body.querySelector('#decInput');
      inp.animate([{transform:'translateX(0)'},{transform:'translateX(-6px)'},{transform:'translateX(6px)'},{transform:'translateX(0)'}],{duration:260});
    }
  });
  body.querySelector('#closeDec').addEventListener('click', ()=>document.body.removeChild(back));
  document.body.appendChild(back);
}

/* --- –§–∏–Ω–∞–ª --- */
function showFinal(){
  finalBox.style.display = 'block';
  // stars: 2 if full, 1 if >=1, else 0
  star1.classList.remove('on'); star1.classList.add('off');
  star2.classList.remove('on'); star2.classList.add('off');
  if(Math.abs(state.scorePoints - maxPoints) < 0.001){
    star1.classList.remove('off'); star1.classList.add('on');
    star2.classList.remove('off'); star2.classList.add('on');
  } else if(state.scorePoints >= 1.0){
    star1.classList.remove('off'); star1.classList.add('on');
  }
  document.getElementById('finalText').textContent = `“∞–ø–∞–π: ${state.scorePoints.toFixed(1)} / ${maxPoints.toFixed(1)}`;
  // (optional) send to server here
}

/* --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–Ω–¥–µ—Ä --- */
function init(){
  // reset state
  state.lockedPuzzles = {music:true, movie:true, book:true, picture:true};
  state.placed = {};
  state.scorePoints = 0.0;
  renderZones();
  renderInventory();
  updateResult();
  finalBox.style.display = 'none';
}
init();
