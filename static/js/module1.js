document.addEventListener('DOMContentLoaded', () => {
  const words = document.querySelectorAll('.word');
  const targets = document.querySelectorAll('.target');
  const checkBtn = document.getElementById('check-btn');
  const wordsContainer = document.getElementById('words-container');
  const targetsContainer = document.getElementById('targets-container');

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
  function shuffleElements(container) {
    const elements = Array.from(container.children);
    elements.sort(() => Math.random() - 0.5);
    elements.forEach(el => container.appendChild(el));
  }

  shuffleElements(targetsContainer);
  shuffleElements(wordsContainer);

  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
  checkBtn.disabled = true;

  // Drag & drop
  words.forEach(word => {
    word.addEventListener('dragstart', e => {
      e.dataTransfer.setData('text/plain', e.target.id);
      e.dataTransfer.effectAllowed = 'move';
    });
  });

  targets.forEach(target => {
    target.addEventListener('dragover', e => {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
    });

    target.addEventListener('drop', e => {
      e.preventDefault();
      const wordId = e.dataTransfer.getData('text/plain');
      const dragged = document.getElementById(wordId);
      if (!dragged) return;

      // –ï—Å–ª–∏ –≤ —Ü–µ–ª–µ–≤–æ–º —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –Ω–∞–∑–∞–¥
      const existing = target.querySelector('img');
      if (existing && existing !== dragged) {
        wordsContainer.appendChild(existing);
      }

      target.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      target.appendChild(dragged);
      checkCompletion();
    });
  });

  function checkCompletion() {
    const placedCount = Array.from(targets).filter(t => t.children.length > 0).length;
    checkBtn.disabled = placedCount !== words.length;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–¢–µ–∫—Å–µ—Ä—É¬ª
  checkBtn.addEventListener('click', () => {
    let correctCount = 0;

    targets.forEach(target => {
      const expected = target.dataset.word;
      const placed   = target.firstChild ? target.firstChild.id : null;

      if (placed === expected) {
        target.classList.add('correct');
        target.classList.remove('incorrect');
        correctCount++;
      } else {
        target.classList.add('incorrect');
        target.classList.remove('correct');
      }
    });

    const score = correctCount * 10;

    fetch("/game_result", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        game_name: "words_match",
        score: score,
        completed: true
      })
    })
    .then(res => res.json())
    .then(data => {
        if (data.status === "ok") {
            const percentage = Math.round((correctCount / words.length) * 100);
            let comment = "";

            if (percentage >= 90) {
                comment = "üéâ ”®—Ç–µ –∂–∞“õ—Å—ã! –°–µ–Ω –±“±–ª —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã –∂–∞“õ—Å—ã –º–µ“£–≥–µ—Ä–¥—ñ“£.";
            } else if (percentage >= 70) {
                comment = "üëç –ñ–∞“õ—Å—ã –Ω”ô—Ç–∏–∂–µ. –¢–∞“ì—ã –¥–∞ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—Å–µ“£ –±–æ–ª–∞–¥—ã.";
            } else if (percentage >= 50) {
                comment = "üôÇ –û—Ä—Ç–∞—à–∞. –ë—ñ—Ä–∞–∑ –∂–∞—Ç—Ç—ã“ì—É “õ–∞–∂–µ—Ç.";
            } else {
                comment = "‚ö†Ô∏è –ë“±–ª —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã —Ç–∞“ì—ã –±—ñ—Ä “õ–∞—Ä–∞–ø —à—ã“õ“õ–∞–Ω –¥“±—Ä—ã—Å.";
            }

            document.getElementById('result-score').innerText = `“∞–ø–∞–π: ${score} (${percentage}%)`;
            document.getElementById('result-comment').innerText = comment;
            document.getElementById('result-box').style.display = 'block';
        } else if (data.status === "denied") {
            alert("–ë“±–ª —Ç–∞–ø—Å—ã—Ä–º–∞–Ω—ã –±“±—Ä—ã–Ω –æ—Ä—ã–Ω–¥–∞–¥—ã“£—ã–∑. “ö–∞–π—Ç–∞ –æ—Ä—ã–Ω–¥–∞—É “Ø—à—ñ–Ω –º“±“ì–∞–ª—ñ–º–≥–µ –∂“Ø–≥—ñ–Ω—ñ“£—ñ–∑.");
                location.href = "/module1";
        } else {
          alert("–ù”ô—Ç–∏–∂–µ–Ω—ñ —Å–∞“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –∫–µ—Ç—Ç—ñ.");
        }
    })
    .catch(() => {
      alert("–°–µ—Ä–≤–µ—Ä–≥–µ “õ–æ—Å—ã–ª–∞ –∞–ª–º–∞–¥—ã.");
    });
  });
});
